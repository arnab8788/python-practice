import re

def add_aliases_to_derived_table_subqueries(sql_query):
    alias_counter = 1
    output = ''
    i = 0
    length = len(sql_query)

    while i < length:
        if sql_query[i:i+4].upper() in ('FROM', 'JOIN'):
            # Confirm it's a real clause
            match = re.match(r'\b(FROM|JOIN)\b', sql_query[i:], re.IGNORECASE)
            if match:
                clause = match.group(0)
                output += clause
                i += len(clause)

                # Skip whitespace
                while i < length and sql_query[i].isspace():
                    output += sql_query[i]
                    i += 1

                # Check if next character is opening parenthesis
                if i < length and sql_query[i] == '(':
                    start = i
                    depth = 0
                    while i < length:
                        if sql_query[i] == '(':
                            depth += 1
                        elif sql_query[i] == ')':
                            depth -= 1
                            if depth == 0:
                                i += 1  # include closing ')'
                                break
                        i += 1
                    subquery_block = sql_query[start:i]

                    # Look ahead to see if there's an alias
                    lookahead = sql_query[i:]
                    alias_match = re.match(r'\s*(AS\s+)?[a-zA-Z_][a-zA-Z0-9_]*', lookahead, re.IGNORECASE)
                    if not alias_match:
                        # No alias, so add one
                        subquery_block += f" AS auto_alias_{alias_counter}"
                        alias_counter += 1
                    output += subquery_block
                else:
                    # Just add whatever follows (e.g., table name)
                    while i < length and sql_query[i] not in (' ', '\n', '\r', '\t', ',', ')'):
                        output += sql_query[i]
                        i += 1
            else:
                output += sql_query[i]
                i += 1
        else:
            output += sql_query[i]
            i += 1

    return output
