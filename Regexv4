import re

def add_aliases_to_derived_table_subqueries(sql_query):
    alias_counter = [1]

    # Matches subqueries used in FROM/JOIN that are not aliased
    pattern = re.compile(
        r'''
        (?P<clause>FROM|JOIN|,)\s*                             # Clause before subquery
        (?P<subquery>                                         
            \(                                                 # Opening parenthesis
                (?:[^()]*                                     # Non-parentheses content
                |
                \((?:[^()]*|(?2))*\))*                        # Nested parentheses
            \)                                                # Closing parenthesis
        )
        (?P<after>\s*)                                         # Optional space after subquery
        (?!                                                   # Ensure not already followed by alias
            (?:AS\s+)?[a-zA-Z_][a-zA-Z0-9_]*\b
        )
        ''',
        re.IGNORECASE | re.VERBOSE | re.DOTALL
    )

    def alias_replacer(match):
        clause = match.group("clause")
        subquery = match.group("subquery")
        after = match.group("after")
        alias = f" AS auto_alias_{alias_counter[0]}"
        alias_counter[0] += 1
        return f"{clause} {subquery}{after}{alias}"

    # Perform replacement just once
    return pattern.sub(alias_replacer, sql_query)
