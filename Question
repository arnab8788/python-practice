I have a requirement - in my DB2 sql queries i have multiple subqueries which does not have an alias, and multiple subqueries are having the alias. My requirement is to convert the DB2 SQL query into SQL sever version where alias to a subquery is mandatory. I cannot use sqlglot or parser, as my target is change the DB2 query to SQL server version, and sqlglot does not support multiple syntaxes of of DB2 query. 

Now lets come to the query complexity: Queries can be very complex. There can be multiple sub queries, unlimited sub queries, unlimited nested subqueries, subqueries can be within CTEs also, subqueries can be with JOINs, basically every possibility. There can be WHERE Clause after a sub-query. There can be JOIN clause after a subquery. 

My purpose is to identify the subqueries which does not have an alias, and give an alias to it. If alias is present, then nothing should be done. The queries can have multiple lines, multiple inline comment statements.

Few cases to keep in mind - CTEs can have nested subqueries. No need to aliad a CTE, but any subquery inside CTE where alias is not present needs to be aliased.
Any sub query without an alias may have WHERE clause just after the subquery. In that case alias needs to be added between the subquery and WHERE clause. If alias is present needs to be ignored.
Exisiting alias names should ot be overwritten.

Providing few sample queries:

Sample Input 1: Select * from (Select * from table) as T1
Sample Output 1: Select * from (Select * from table) as T1

Sample Input 2: Select * from (Select * from table) 
Sample Output 2: Select * from (Select * from table) as AutoAlias1 

Sample Input 3: Select * from (Select * from table) as T with ur for read only
Sample Output 3: Select * from (Select * from table) as T with ur for read only

Sample Input 4: Select * from (
Select * from (
Select * from (
Select * from (Select * from Table)
) as T2
)
) T3

Sample Output 4: Select * from (
Select * from (
Select * from (
Select * from (Select * from Table) as AutoAlias1
) as T2
) as AutoAlias2
) T3

Sample Input 5: WITH DRV AS (
	SELECT REC_IND, POLICYNUMBER FROM
	$$SCHEMA_NLZC.DTL_POLICY_DRIVER
	where PROCESS_ID='$$PROCESS_ID'
),

H1 AS (
	SELECT * FROM
	(
		SELECT CLONE.POLICYNUMBER, 
		CLONE.EVENTCODE, 
		CLONE.EVENTSEQUENCE,
		CLONE.EVENTAMOUNT,
		ROW_NUMBER() OVER 
		(PARTITION BY CLONE.POLICYNUMBER ORDER BY CLONE.EVENTSEQUENCE DESC) AS RNO
		FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY CLONE
		INNER JOIN DRV
		ON DRV.POLICYNUMBER=CLONE.POLICYNUMBER
		AND CLONE.EVENTCODE IN ('P300', 'P340', 'P345', 'P320', 'P350')
	)
	WHERE RNO=1
)

SELECT  
 DRV.POLICYNUMBER
, DRV.REC_IND
, POL.NFOCMBTYPE
, COALESCE(H1.EVENTAMOUNT, 0) AS LAST_LIFE_PREM_AMT
, COALESCE(H2.EVENTAMOUNT, 0) AS LAST_LTC_PREM_AMT
FROM
DRV

LEFT OUTER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICY POL 
ON POL.POLICYNUMBER = DRV.POLICYNUMBER 

LEFT JOIN H1
ON H1.POLICYNUMBER=DRV.POLICYNUMBER

LEFT JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY H2
ON H2.POLICYNUMBER=DRV.POLICYNUMBER
AND H2.EVENTCODE='P309'

Sample Output 5: WITH DRV AS (
	SELECT REC_IND, POLICYNUMBER FROM
	$$SCHEMA_NLZC.DTL_POLICY_DRIVER
	where PROCESS_ID='$$PROCESS_ID'
),

H1 AS (
	SELECT * FROM
	(
		SELECT CLONE.POLICYNUMBER, 
		CLONE.EVENTCODE, 
		CLONE.EVENTSEQUENCE,
		CLONE.EVENTAMOUNT,
		ROW_NUMBER() OVER 
		(PARTITION BY CLONE.POLICYNUMBER ORDER BY CLONE.EVENTSEQUENCE DESC) AS RNO
		FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY CLONE
		INNER JOIN DRV
		ON DRV.POLICYNUMBER=CLONE.POLICYNUMBER
		AND CLONE.EVENTCODE IN ('P300', 'P340', 'P345', 'P320', 'P350')
	) as AutoAlias1
	WHERE RNO=1
)

SELECT  
 DRV.POLICYNUMBER
, DRV.REC_IND
, POL.NFOCMBTYPE
, COALESCE(H1.EVENTAMOUNT, 0) AS LAST_LIFE_PREM_AMT
, COALESCE(H2.EVENTAMOUNT, 0) AS LAST_LTC_PREM_AMT
FROM
DRV

LEFT OUTER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICY POL 
ON POL.POLICYNUMBER = DRV.POLICYNUMBER 

LEFT JOIN H1
ON H1.POLICYNUMBER=DRV.POLICYNUMBER

LEFT JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY H2
ON H2.POLICYNUMBER=DRV.POLICYNUMBER
AND H2.EVENTCODE='P309'

Sample Input 6: WITH LEGALACTION AS 
(
        SELECT * FROM (
                SELECT SRC.*, DRV.REC_IND, 
                ROW_NUMBER() OVER (PARTITION BY SRC.POLICYNUMBER,DRV.REC_IND,SRC.LEGALACTIONID ORDER BY SRC.SETTLESUBTYPE ASC) RNUM
                FROM 
               $$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
                INNER JOIN
                $$SCHEMA_NLZC.T_2V_CLONE_DSLEGALACTION SRC 
                ON DRV.POLICYNUMBER=SRC.POLICYNUMBER
                WHERE PROCESS_ID='$$PROCESS_ID'
                AND (ENDDATE IS NULL OR ENDDATE > CONVERT(DATETIME, '$$JH_CYCLEDATE', 101))
        ) WHERE RNUM = '1'
)

SELECT 
CASE DLTA.REC_IND
 WHEN 'I' THEN 'C'
 ELSE DLTA.REC_IND
END REC_IND,
DLTA.POLICYNUMBER,
DLTA.POLCTRLCODETYPE,
DLTA.POLCTRLCODE,
NULL DEC_VAL,
POLCON.ACTIVEIND,
NULL AS INT_VAL,
CASE WHEN POLCON.POLCTRLCODETYPE='FF' THEN POLCON.CREATEDBY ELSE NULL END AS FREEZE_CREAT_BY
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
INNER JOIN
$$SCHEMA_NLZC.T_2V_DELTA_DSPOLICYCONTROLCODES DLTA
ON DRV.POLICYNUMBER = DLTA.POLICYNUMBER
AND DRV.PROCESS_ID = '$$PROCESS_ID'
LEFT OUTER JOIN 
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYCONTROLCODES POLCON
ON POLCON.POLICYNUMBER = DLTA.POLICYNUMBER
and POLCON.POLCTRLCODETYPE= DLTA.POLCTRLCODETYPE
and POLCON.POLCTRLCODE= DLTA.POLCTRLCODE

UNION

SELECT 
DRV.REC_IND,
MISC.POLICYNUMBER,
'CONV_XCHNG_CD',
CAST(MISC.INTVALUE AS VARCHAR),
NULL,
NULL,
NULL,
NULL
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
INNER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYMISCVALUE MISC
ON MISC.POLICYNUMBER = DRV.POLICYNUMBER
where PROCESS_ID='$$PROCESS_ID' 
AND  upper(MISC.VALUEID)='CONVERSION EXCHANGE CODE'

UNION

SELECT 
DRV.REC_IND,
CO.PolicyNumber, 
'AIP_PCRB_AMT', 
'' AS CHAR_VAL,
CL.FaceAmount AS DEC_VAL,
NULL,
NULL,
NULL
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV

INNER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSCoverage CO
ON CO.POLICYNUMBER = DRV.POLICYNUMBER
AND CO.COVERAGEID=DRV.COVERAGEID
AND DRV.PROCESS_ID = '$$PROCESS_ID'

LEFT JOIN	$$SCHEMA_NLZC.T_2V_CLONE_DSPolicy PO
		ON	PO.POLICYNUMBER = CO.PolicyNumber
LEFT JOIN	$$SCHEMA_NLZC.T_2V_CLONE_DSCoverageLayer CL
		ON	CL.POLICYNUMBER = CO.PolicyNumber
		AND	CL.CoverageID = CO.CoverageID

WHERE	
CO.PRDCOVERAGEID='164'
	AND	CL.LAYERID = '002'
	AND	CL.FaceAmount > 0

UNION

SELECT 
CASE 
WHEN LA.ENDDATE<CONVERT(DATETIME, '$$JH_CYCLEDATE', 101) THEN 'D' 
ELSE 'C' 
END as REC_IND,
LA.POLICYNUMBER,
'LGL_ACT_ID',
LA.LEGALACTIONID,
NULL,
NULL,
LA.ACTIVEIND as INT_VAL,
NULL
FROM
LEGALACTION LA


Sample Output 6: WITH LEGALACTION AS 
(
        SELECT * FROM (
                SELECT SRC.*, DRV.REC_IND, 
                ROW_NUMBER() OVER (PARTITION BY SRC.POLICYNUMBER,DRV.REC_IND,SRC.LEGALACTIONID ORDER BY SRC.SETTLESUBTYPE ASC) RNUM
                FROM 
               $$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
                INNER JOIN
                $$SCHEMA_NLZC.T_2V_CLONE_DSLEGALACTION SRC 
                ON DRV.POLICYNUMBER=SRC.POLICYNUMBER
                WHERE PROCESS_ID='$$PROCESS_ID'
                AND (ENDDATE IS NULL OR ENDDATE > CONVERT(DATETIME, '$$JH_CYCLEDATE', 101))
        ) as AutoAlias1 WHERE RNUM = '1'
)

SELECT 
CASE DLTA.REC_IND
 WHEN 'I' THEN 'C'
 ELSE DLTA.REC_IND
END REC_IND,
DLTA.POLICYNUMBER,
DLTA.POLCTRLCODETYPE,
DLTA.POLCTRLCODE,
NULL DEC_VAL,
POLCON.ACTIVEIND,
NULL AS INT_VAL,
CASE WHEN POLCON.POLCTRLCODETYPE='FF' THEN POLCON.CREATEDBY ELSE NULL END AS FREEZE_CREAT_BY
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
INNER JOIN
$$SCHEMA_NLZC.T_2V_DELTA_DSPOLICYCONTROLCODES DLTA
ON DRV.POLICYNUMBER = DLTA.POLICYNUMBER
AND DRV.PROCESS_ID = '$$PROCESS_ID'
LEFT OUTER JOIN 
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYCONTROLCODES POLCON
ON POLCON.POLICYNUMBER = DLTA.POLICYNUMBER
and POLCON.POLCTRLCODETYPE= DLTA.POLCTRLCODETYPE
and POLCON.POLCTRLCODE= DLTA.POLCTRLCODE

UNION

SELECT 
DRV.REC_IND,
MISC.POLICYNUMBER,
'CONV_XCHNG_CD',
CAST(MISC.INTVALUE AS VARCHAR),
NULL,
NULL,
NULL,
NULL
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV
INNER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYMISCVALUE MISC
ON MISC.POLICYNUMBER = DRV.POLICYNUMBER
where PROCESS_ID='$$PROCESS_ID' 
AND  upper(MISC.VALUEID)='CONVERSION EXCHANGE CODE'

UNION

SELECT 
DRV.REC_IND,
CO.PolicyNumber, 
'AIP_PCRB_AMT', 
'' AS CHAR_VAL,
CL.FaceAmount AS DEC_VAL,
NULL,
NULL,
NULL
FROM
$$SCHEMA_NLZC.DTL_POLICY_DRIVER DRV

INNER JOIN
$$SCHEMA_NLZC.T_2V_CLONE_DSCoverage CO
ON CO.POLICYNUMBER = DRV.POLICYNUMBER
AND CO.COVERAGEID=DRV.COVERAGEID
AND DRV.PROCESS_ID = '$$PROCESS_ID'

LEFT JOIN	$$SCHEMA_NLZC.T_2V_CLONE_DSPolicy PO
		ON	PO.POLICYNUMBER = CO.PolicyNumber
LEFT JOIN	$$SCHEMA_NLZC.T_2V_CLONE_DSCoverageLayer CL
		ON	CL.POLICYNUMBER = CO.PolicyNumber
		AND	CL.CoverageID = CO.CoverageID

WHERE	
CO.PRDCOVERAGEID='164'
	AND	CL.LAYERID = '002'
	AND	CL.FaceAmount > 0

UNION

SELECT 
CASE 
WHEN LA.ENDDATE<CONVERT(DATETIME, '$$JH_CYCLEDATE', 101) THEN 'D' 
ELSE 'C' 
END as REC_IND,
LA.POLICYNUMBER,
'LGL_ACT_ID',
LA.LEGALACTIONID,
NULL,
NULL,
LA.ACTIVEIND as INT_VAL,
NULL
FROM
LEGALACTION LA


Sample Input 7: WITH DRV AS
(
	SELECT DISTINCT POLICYNUMBER, REC_IND
	FROM $$SCHEMA_NLZC.DTL_POLICY_DRIVER
	WHERE PROCESS_ID='$$PROCESS_ID'
),

EV_NETAMOUNT AS
(
    SELECT DRV.POLICYNUMBER,
    SUM(NETAMOUNT) as AMOUNT,
    MAX(EFFDATE) AS LAST_UPDATED 
    FROM DRV
    INNER JOIN ATLAST_NLZ.DSEVENTHISTORY EVH
	    ON EVH.POLICYNUMBER=DRV.POLICYNUMBER
	    AND EVENTCODE='A001'
    INNER JOIN ATLAST_NLZ.DSEVENTDETAIL DETAIL
	    ON DETAIL.EVENTSEQUENCE=EVH.EVENTSEQUENCE
	    AND DETAIL.INVESTMENTID IN ('LOANFUND','LoanFund')
	    AND CURRENTRECORD=1
    WHERE EFFDATE BETWEEN FIRST_DAY(CONVERT(DATETIME, '$$JH_CYCLEDATE', 101)) AND CONVERT(DATETIME, '$$JH_CYCLEDATE', 101)
    GROUP BY DRV.POLICYNUMBER
),

POLV_LOAN AS
(
	SELECT * FROM
	(
		SELECT POLV.POLICYNUMBER, POLV.QUOTESEQ, POLV.EFFDATE, POLV.PARAMCALCDBIND, POLV.LOANCRDTRATE,
		ROW_NUMBER() OVER (PARTITION BY POLV.POLICYNUMBER, POLV.QUOTESEQ ORDER BY POLV.EFFDATE DESC) AS RNO
		FROM $$SCHEMA_NLZ.DSPOLICYVALUE POLV
		INNER JOIN DRV
		ON DRV.POLICYNUMBER=POLV.POLICYNUMBER
		AND POLV.PARAMCALCDBIND='1'
	)
	WHERE RNO='1'
),

EVH AS
(
	SELECT DRV.POLICYNUMBER, DET.NETAMOUNT
	FROM DRV
	INNER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY EVH
	ON DRV.POLICYNUMBER=EVH.POLICYNUMBER
	AND EVH.EVENTCODE='A640'
	INNER JOIN $$SCHEMA_NLZ.DSEVENTDETAIL DET
	ON EVH.EVENTSEQUENCE=DET.EVENTSEQUENCE
	AND UPPER(TRIM(DET.INVESTMENTID))='LOANFUND'
)

SELECT 
POLV.LOANBALANCE
, POLV.LOANAVAILAMOUNT
, POLV.LOANMAXAMOUNT
, POLV.LOANCHRGRATE
, DRV.REC_IND
, DRV.POLICYNUMBER
, POLV.LOANINTACCR
, EVNT_A.PARENTEVNTSEQ
, EVNT_B.PARENTEVNTSEQ
, ADM.LOANRATETYPE,
CASE
	WHEN TRIM(LOAN.EILOANPROCTYPE)='0' THEN 'Standard Index Loan'
	WHEN TRIM(LOAN.EILOANPROCTYPE)='1' THEN 'Variable Index Loan'
	WHEN TRIM(LOAN.EILOANPROCTYPE)='2' THEN 'Fixed Index Loan'
	ELSE ''
END AS INDX_LOAN_TYPE_IND,
EVH.NETAMOUNT,
POLV_LOAN.LOANCRDTRATE,
EVNT_C.EVENTAMOUNT,
EVNT_C.EVENTDATE,
EVNT_D.EVENTDATE AS LAST_LOAN_DISB_DT

, EV_NETAMOUNT.AMOUNT AS LOAN_ASSET_INT_MTD
,EV_NETAMOUNT.LAST_UPDATED AS LOAN_ASSET_INT_AS_OF_DATE
FROM DRV
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYVALUE POLV 
ON POLV.POLICYNUMBER = DRV.POLICYNUMBER 
LEFT OUTER JOIN (
	SELECT PARENTEVNTSEQ, POLICYNUMBER
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='P300'
) EVNT_A
ON DRV.POLICYNUMBER = EVNT_A.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT PARENTEVNTSEQ, POLICYNUMBER
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='S522'
) EVNT_B
ON DRV.POLICYNUMBER = EVNT_B.POLICYNUMBER
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYLOAN LOAN
ON DRV.POLICYNUMBER=LOAN.POLICYNUMBER
LEFT OUTER JOIN POLV_LOAN
ON DRV.POLICYNUMBER=POLV_LOAN.POLICYNUMBER
LEFT OUTER JOIN EVH
ON DRV.POLICYNUMBER=EVH.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT POLICYNUMBER, EVENTAMOUNT, EVENTDATE
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='P410'
) EVNT_C
ON DRV.POLICYNUMBER=EVNT_C.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT POLICYNUMBER, EVENTAMOUNT, EVENTDATE
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='S520'
) EVNT_D
ON DRV.POLICYNUMBER=EVNT_D.POLICYNUMBER
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSADMRULE ADM
ON ADM.POLICYNUMBER =DRV.POLICYNUMBER

LEFT OUTER JOIN EV_NETAMOUNT
ON DRV.POLICYNUMBER=EV_NETAMOUNT.POLICYNUMBER



Sample Output 7: WITH DRV AS
(
	SELECT DISTINCT POLICYNUMBER, REC_IND
	FROM $$SCHEMA_NLZC.DTL_POLICY_DRIVER
	WHERE PROCESS_ID='$$PROCESS_ID'
),

EV_NETAMOUNT AS
(
    SELECT DRV.POLICYNUMBER,
    SUM(NETAMOUNT) as AMOUNT,
    MAX(EFFDATE) AS LAST_UPDATED 
    FROM DRV
    INNER JOIN ATLAST_NLZ.DSEVENTHISTORY EVH
	    ON EVH.POLICYNUMBER=DRV.POLICYNUMBER
	    AND EVENTCODE='A001'
    INNER JOIN ATLAST_NLZ.DSEVENTDETAIL DETAIL
	    ON DETAIL.EVENTSEQUENCE=EVH.EVENTSEQUENCE
	    AND DETAIL.INVESTMENTID IN ('LOANFUND','LoanFund')
	    AND CURRENTRECORD=1
    WHERE EFFDATE BETWEEN FIRST_DAY(CONVERT(DATETIME, '$$JH_CYCLEDATE', 101)) AND CONVERT(DATETIME, '$$JH_CYCLEDATE', 101)
    GROUP BY DRV.POLICYNUMBER
),

POLV_LOAN AS
(
	SELECT * FROM
	(
		SELECT POLV.POLICYNUMBER, POLV.QUOTESEQ, POLV.EFFDATE, POLV.PARAMCALCDBIND, POLV.LOANCRDTRATE,
		ROW_NUMBER() OVER (PARTITION BY POLV.POLICYNUMBER, POLV.QUOTESEQ ORDER BY POLV.EFFDATE DESC) AS RNO
		FROM $$SCHEMA_NLZ.DSPOLICYVALUE POLV
		INNER JOIN DRV
		ON DRV.POLICYNUMBER=POLV.POLICYNUMBER
		AND POLV.PARAMCALCDBIND='1'
	) as AutoAlias1
	WHERE RNO='1'
),

EVH AS
(
	SELECT DRV.POLICYNUMBER, DET.NETAMOUNT
	FROM DRV
	INNER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY EVH
	ON DRV.POLICYNUMBER=EVH.POLICYNUMBER
	AND EVH.EVENTCODE='A640'
	INNER JOIN $$SCHEMA_NLZ.DSEVENTDETAIL DET
	ON EVH.EVENTSEQUENCE=DET.EVENTSEQUENCE
	AND UPPER(TRIM(DET.INVESTMENTID))='LOANFUND'
)

SELECT 
POLV.LOANBALANCE
, POLV.LOANAVAILAMOUNT
, POLV.LOANMAXAMOUNT
, POLV.LOANCHRGRATE
, DRV.REC_IND
, DRV.POLICYNUMBER
, POLV.LOANINTACCR
, EVNT_A.PARENTEVNTSEQ
, EVNT_B.PARENTEVNTSEQ
, ADM.LOANRATETYPE,
CASE
	WHEN TRIM(LOAN.EILOANPROCTYPE)='0' THEN 'Standard Index Loan'
	WHEN TRIM(LOAN.EILOANPROCTYPE)='1' THEN 'Variable Index Loan'
	WHEN TRIM(LOAN.EILOANPROCTYPE)='2' THEN 'Fixed Index Loan'
	ELSE ''
END AS INDX_LOAN_TYPE_IND,
EVH.NETAMOUNT,
POLV_LOAN.LOANCRDTRATE,
EVNT_C.EVENTAMOUNT,
EVNT_C.EVENTDATE,
EVNT_D.EVENTDATE AS LAST_LOAN_DISB_DT

, EV_NETAMOUNT.AMOUNT AS LOAN_ASSET_INT_MTD
,EV_NETAMOUNT.LAST_UPDATED AS LOAN_ASSET_INT_AS_OF_DATE
FROM DRV
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYVALUE POLV 
ON POLV.POLICYNUMBER = DRV.POLICYNUMBER 
LEFT OUTER JOIN (
	SELECT PARENTEVNTSEQ, POLICYNUMBER
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='P300'
) EVNT_A
ON DRV.POLICYNUMBER = EVNT_A.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT PARENTEVNTSEQ, POLICYNUMBER
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='S522'
) EVNT_B
ON DRV.POLICYNUMBER = EVNT_B.POLICYNUMBER
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSPOLICYLOAN LOAN
ON DRV.POLICYNUMBER=LOAN.POLICYNUMBER
LEFT OUTER JOIN POLV_LOAN
ON DRV.POLICYNUMBER=POLV_LOAN.POLICYNUMBER
LEFT OUTER JOIN EVH
ON DRV.POLICYNUMBER=EVH.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT POLICYNUMBER, EVENTAMOUNT, EVENTDATE
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='P410'
) EVNT_C
ON DRV.POLICYNUMBER=EVNT_C.POLICYNUMBER
LEFT OUTER JOIN (
	SELECT POLICYNUMBER, EVENTAMOUNT, EVENTDATE
	FROM $$SCHEMA_NLZC.T_2V_CLONE_DSEVENTHISTORY
	WHERE EVENTCODE='S520'
) EVNT_D
ON DRV.POLICYNUMBER=EVNT_D.POLICYNUMBER
LEFT OUTER JOIN $$SCHEMA_NLZC.T_2V_CLONE_DSADMRULE ADM
ON ADM.POLICYNUMBER =DRV.POLICYNUMBER

LEFT OUTER JOIN EV_NETAMOUNT
ON DRV.POLICYNUMBER=EV_NETAMOUNT.POLICYNUMBER
