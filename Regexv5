import re

def add_aliases_to_derived_table_subqueries(sql_query):
    alias_counter = [1]

    # Updated pattern: match FROM/JOIN/COMMA + (subquery) without alias AFTER it
    pattern = re.compile(
        r'''
        (?P<clause>\bFROM\b|\bJOIN\b|,)      # Match FROM, JOIN, or comma
        \s*
        (?P<subquery>                        # Capture the subquery
            \(
                (?:[^()]+|(?R))*             # Match inner SQL including nested parentheses
            \)
        )
        (?P<whitespace>\s*)                  # Optional whitespace
        (?!                                  # Negative lookahead: do NOT alias if one exists
            (?:AS\s+)?[a-zA-Z_][a-zA-Z0-9_]* # Alias already exists
        )
        (?!\s*\))                            # Also ignore if it's just closed (like ") as alias")
        ''',
        re.IGNORECASE | re.VERBOSE | re.DOTALL
    )

    def alias_replacer(match):
        clause = match.group("clause")
        subquery = match.group("subquery")
        whitespace = match.group("whitespace")
        alias = f" AS auto_alias_{alias_counter[0]}"
        alias_counter[0] += 1
        return f"{clause} {subquery}{whitespace}{alias}"

    # Run it once to avoid infinite loops
    return pattern.sub(alias_replacer, sql_query)
