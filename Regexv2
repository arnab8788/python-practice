import re

def add_aliases_to_derived_table_subqueries(sql_query):
    alias_counter = [1]
    MAX_ITERATIONS = 50
    iterations = 0

    # Match FROM or JOIN followed by a subquery
    subquery_pattern = re.compile(
        r'''
        (
            (?:
                \bFROM\b |
                \bJOIN\b |
                ,                 # Comma-separated derived tables
            )
            \s*
            \(                   # Opening parenthesis
                [\s\n]*SELECT\b  # SELECT keyword
                (?:[^()]+|(?R))* # Handle nested
            \)                   # Closing parenthesis
            \s*                  # Optional whitespace
        )
        (?!                     # If not already followed by alias
            \s*
            (AS\s+)?[a-zA-Z_][a-zA-Z0-9_]*\b
        )
        ''',
        re.IGNORECASE | re.VERBOSE | re.DOTALL
    )

    def alias_replacer(match):
        matched = match.group(1)
        alias = f" AS auto_alias_{alias_counter[0]}"
        alias_counter[0] += 1
        return matched + alias

    previous = None
    while previous != sql_query and iterations < MAX_ITERATIONS:
        previous = sql_query
        sql_query = subquery_pattern.sub(alias_replacer, sql_query)
        iterations += 1

    if iterations == MAX_ITERATIONS:
        raise RuntimeError("Max iterations reached during aliasing. Potential infinite loop.")

    return sql_query
