import re

def add_alias_to_subqueries_final(sql: str) -> str:
    """
    Adds aliases to subqueries missing them, especially before WHERE, GROUP BY,
    HAVING, and ORDER BY clauses â€” required by SQL Server.
    """
    def remove_comments(query):
        query = re.sub(r'--.*?$', '', query, flags=re.MULTILINE)
        query = re.sub(r'/\*.*?\*/', '', query, flags=re.DOTALL)
        return query

    def find_subqueries(query):
        stack = []
        subqueries = []
        for i, char in enumerate(query):
            if char == '(':
                stack.append(i)
            elif char == ')':
                if stack:
                    start = stack.pop()
                    content = query[start + 1:i].strip()
                    if re.match(r"^select\b", content, re.IGNORECASE):
                        subqueries.append((start, i))
        return subqueries

    def insert_aliases(query, subqueries):
        added = 0
        used_aliases = set()
        for start, end in sorted(subqueries, key=lambda x: x[0], reverse=True):
            insert_pos = end + added
            after = query[insert_pos + 1:]
            after_stripped = after.lstrip()

            # Must add alias if:
            # 1. No alias or AS keyword found after the subquery
            # 2. Next token is WHERE/GROUP BY/HAVING/ORDER BY
            if not re.match(r'^(as\s+\w+|\w+)', after_stripped, re.IGNORECASE) or \
               re.match(r'^(where|group\s+by|having|order\s+by)', after_stripped, re.IGNORECASE):

                alias = f"auto_alias_{len(used_aliases)+1}"
                while alias in used_aliases:
                    alias = f"auto_alias_{len(used_aliases)+1}"
                used_aliases.add(alias)

                query = query[:insert_pos + 1] + f' {alias}' + query[insert_pos + 1:]
                added += len(f' {alias}')
        return query

    clean_sql = remove_comments(sql)
    subqueries = find_subqueries(clean_sql)
    return insert_aliases(sql, subqueries)
