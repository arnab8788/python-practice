import re

def add_aliases_to_all_subqueries(sql_query):
    alias_counter = [1]
    MAX_ITERATIONS = 50
    iterations = 0

    # Match any subquery (FROM, WHERE, IN, etc.), even with newline formatting
    subquery_pattern = re.compile(
        r'''
        (
            \(                          # Opening parenthesis of subquery
                [\s\n]*SELECT\b         # SELECT keyword, possibly with space/newline
                (?:[^()]+|(?R))*        # Subquery content (including nested)
            \)                          # Closing parenthesis
            \s*                         # Optional space
        )
        (?!                             # If not followed by alias
            \s*                         # optional space
            (AS\s+)?                    # optional AS
            [a-zA-Z_][a-zA-Z0-9_]*\b    # alias name
        )
        ''',
        re.IGNORECASE | re.VERBOSE | re.DOTALL
    )

    def alias_replacer(match):
        subquery = match.group(1)
        alias = f" AS auto_alias_{alias_counter[0]}"
        alias_counter[0] += 1
        return subquery + alias

    previous = None
    while previous != sql_query and iterations < MAX_ITERATIONS:
        previous = sql_query
        sql_query = subquery_pattern.sub(alias_replacer, sql_query)
        iterations += 1

    if iterations == MAX_ITERATIONS:
        raise RuntimeError("Subquery aliasing exceeded max iterations. Possible infinite loop.")

    return sql_query
