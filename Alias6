import re

def add_subquery_aliases(sql: str) -> str:
    """
    Adds required aliases to subqueries in DB2 SQL for conversion to SQL Server.
    Only adds aliases to subqueries that are completely missing them.
    """
    # Improved pattern to identify subqueries that truly need aliases
    subquery_pattern = re.compile(
        r"""
        (\(
            (?:[^()]|(?R))*  # Match anything but parentheses, or recurse
        \))
        (?!\s*(?:AS\s+)?[a-zA-Z_][a-zA-Z0-9_]*)  # Negative lookahead for existing alias
        (?=\s*(?:WHERE|GROUP\s+BY|HAVING|ORDER\s+BY|JOIN|,|\)|$))  # Lookahead for clause end
        """,
        re.IGNORECASE | re.VERBOSE | re.DOTALL
    )
    
    # Track used aliases to avoid duplicates
    used_aliases = set()
    alias_counter = 1
    
    def process_match(match):
        nonlocal alias_counter
        
        # Check if this is actually a SELECT subquery
        subquery = match.group(1)
        if not re.search(r'\bselect\b', subquery, re.IGNORECASE | re.DOTALL):
            return match.group(0)
        
        # Check if the subquery is already referenced (like EVNT_A, EVNT_B, etc.)
        after_subquery = sql[match.end():match.end()+50]  # Look ahead 50 chars
        if re.search(r'\b(?:ON|JOIN|,)\s+[a-zA-Z_][a-zA-Z0-9_]*\b', after_subquery, re.IGNORECASE):
            return match.group(0)
        
        # Generate a unique alias
        while True:
            alias = f"subq{alias_counter}"
            alias_counter += 1
            if alias not in used_aliases:
                used_aliases.add(alias)
                break
        
        # Return the subquery with alias
        return f"{subquery} AS {alias}"
    
    # Process the SQL
    return subquery_pattern.sub(process_match, sql)
